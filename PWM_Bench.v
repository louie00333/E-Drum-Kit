
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module PWM_Bench(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,
	
	//////////// 2x13 GPIO Header //////////
	inout 		    [12:0]		GPIO_2,
	
	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [33:0]		GPIO,
	
	//////////// ADC //////////
	output		          		ADC_CS_N,
	output		          		ADC_SADDR,
	output		          		ADC_SCLK,
	input 		          		ADC_SDAT,
	

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,		
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		     [1:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

parameter [15:0] clk_prescale_48k = 1023;
parameter [15:0] clk_prescale_16k = 3125;
parameter [15:0] clk_prescale_1k  = 50000;
parameter [15:0] clk_prescale_1M  = 50;
// Ensure these parameters match SDRAM Module
parameter N=13, M=16;

//reg  CLOCK_50;

// 50M/1023/NoteFrequency
parameter [15:0] A3	= 222;
parameter [15:0] C4	= 187;
parameter [15:0] D4	= 166;
parameter [15:0] E4	= 148;
parameter [15:0] F4	= 140;

wire CLOCK_48k;
wire CLOCK_16k;
wire CLOCK_1M;
wire CLOCK_1k;

wire Output_1, Output_2, Output_3, Output_4, Output_5, Output_MIX;
wire [4:0]  sel;
wire [11:0]	ADC_Val;
wire MIX_Freq;

assign sel[0] = GPIO[0];
assign sel[1] = GPIO[1];
assign sel[2] = GPIO[3];
assign sel[3] = GPIO[5];
assign sel[4] = GPIO[7];

//=======================================================
//  Structural coding
//=======================================================
Clock_Scaler	clk0 (clk_prescale_48k, CLOCK_50, CLOCK_48k);
Clock_Scaler	clk1 (clk_prescale_1M, CLOCK_50, CLOCK_1M);

PWM_Generator  u1 (Output_1, A3, CLOCK_48k);
PWM_Generator	u2 (Output_2, C4, CLOCK_48k);
PWM_Generator	u3 (Output_3, D4, CLOCK_48k);
PWM_Generator	u4 (Output_4, E4, CLOCK_48k);
PWM_Generator	u5 (Output_5, F4, CLOCK_48k);

Adder	f1 (MIX_Freq, A3, C4, D4, E4, F4, sel, CLOCK_50);
PWM_Generator	u6 (Output_MIX, MIX_Freq, CLOCK_48k);	// TODO: Change BUTTON to SW_Enable

assign	GPIO[33] = (sel==5'b11111) ? 1'b0 : 1'bz,
			GPIO[33]	= (sel==5'b11110) ? Output_1 : 1'bz,
			GPIO[33]	= (sel==5'b11101) ? Output_2 : 1'bz,
			GPIO[33]	= (sel==5'b11011) ? Output_3 : 1'bz,
			GPIO[33]	= (sel==5'b10111) ? Output_4 : 1'bz,
			GPIO[33]	= (sel==5'b01111) ? Output_5 : 1'bz;			//GPIO[33]	= (sel==5'b10) ? Output_2 : 'bz,

assign	GPIO[33]	= (sel!=5'b11111 && 
							sel!=5'b11110 &&
							sel!=5'b11101 &&
							sel!=5'b11011 &&
							sel!=5'b10111 &&
							sel!=5'b01111) ? Output_MIX : 1'bz;		
/*
ADC_In	ADC1(
	LED,
	ADC_Val,
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	
	CLOCK_1M,
	ADC_SDAT
);*/


/*
SDRAM_Read	DRAM0 (
	CLOCK_16k,
	DRAM_WE_N,
	DRAM_ADDR[N-1:0],	// Address
	GPIO[M-1:0],		// Board Output Pins
	DRAM_DQ[M-1:0],	// DataIn
	DRAM_DQ[M-1:0],	// DataOut
	
	DRAM_CAS_N,			// ~Column Address Select
	DRAM_RAS_N,			// ~Row Address Select
	DRAM_CKE,			// CLK Enable
	DRAM_CS_N,			// ~Chip Select
	DRAM_DQM,			// L/H byte mask
	DRAM_BA,
	KEY[1]				// Execute Button
	
); 
*/

//=======================================================
//  Test Bench
//=======================================================
/*
initial
	begin
		CLOCK_50 = 0;
	end

always #5 CLOCK_50 = ~CLOCK_50;
*/

endmodule
