
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module PWM_Bench(

	//////////// CLOCK //////////
	//input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,
	
	//////////// 2x13 GPIO Header //////////
	inout 		    [12:0]		GPIO_2,
	
	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [33:0]		GPIO,
	
	//////////// ADC //////////
	output		          		ADC_CS_N,
	output		          		ADC_SADDR,
	output		          		ADC_SCLK,
	input 		          		ADC_SDAT,
	

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,		
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		     [1:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
parameter [15:0] Top		= 1000;
parameter [15:0] Top2	= 100;
parameter [15:0]  clk_prescale_48k = 1023;
parameter [15:0]  clk_prescale_16k = 3125;
// Ensure these parameters match SDRAM Module
parameter N=13, M=16;

reg  CLOCK_50;

wire CLOCK_48k;
wire CLOCK_16k;
wire [11:0]	ADC_Val;

//=======================================================
//  Structural coding
//=======================================================
/*
Clock_Scaler	clk0 (clk_prescale_48k, CLOCK_50, CLOCK_48k);
Clock_Scaler	clk1 (clk_prescale_16k, CLOCK_50, CLOCK_16k);

PWM_Test	u0 (GPIO_2[0], Top, CLOCK_48k, KEY[0]);
PWM_Test	u1 (GPIO_2[1], Top2, CLOCK_48k, KEY[0]);
*/
ADC_In	ADC1(
	LED,
	ADC_Val,
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	
	KEY[0],
	CLOCK_50,
	ADC_SDAT
);

/*
SDRAM_Read	DRAM0 (
	CLOCK_16k,
	DRAM_WE_N,
	DRAM_ADDR[N-1:0],	// Address
	GPIO[M-1:0],		// Board Output Pins
	DRAM_DQ[M-1:0],	// DataIn
	DRAM_DQ[M-1:0],	// DataOut
	
	DRAM_CAS_N,			// ~Column Address Select
	DRAM_RAS_N,			// ~Row Address Select
	DRAM_CKE,			// CLK Enable
	DRAM_CS_N,			// ~Chip Select
	DRAM_DQM,			// L/H byte mask
	DRAM_BA,
	KEY[1]				// Execute Button
	
); 
*/

//=======================================================
//  Test Bench
//=======================================================


initial
	begin
		CLOCK_50 = 0;
	end

always #10 CLOCK_50 = ~CLOCK_50;


endmodule
